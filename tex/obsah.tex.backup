%=========================================================================

\chapter{Úvod}
World Wide Web (dále jen WWW) dokumenty jsou stále více vyu¾ívanìj¹ími sdìlovacími prostøedky. Jejich poèet neustále roste [zdroj]. Vyu¾ití WWW dokumentù se nachází. WWW dokumenty se vuy¾ívají na ¹irokou ¹kálu úèelù. Mùl¾eme narazit na dokumenty se spí¹e statickým obsahem jako jsou blogy, firemní reprezentace atd. Mù¾eme ale také narazit na velice dynamické dokumenty jako jsou internetové vyhledavaèe. informaèní systémy, webové aplikace aj. 

Mno¾ství webových stránek na doménì je témìø neomezený a na internetu lze najít domény o nìkolika stránek, ale i domény jejich¾ obsah roste po více jak deset let. Takové domény pak cyklicky procházejí refactoringem kodu a nìkdy i celého systému. Mù¾e se pak stát, ¾e se øada stránek zapomene èi vytratí. Èi naopak, ¾e systém roste a nalepují se na nìj dal¹í a dal¹í èasti mnohdy zbyteènì. Stejnì tak se staré neodstraní, tøeba i z dùvodu, ¾e v programátorském týmu "nikdo nemá tu¹ení co to dìlá a co se stane, pokud se to dá pryè". 

Z tohoto a dal¹ích dùvodù vyu¾ívaji týmy mnoho nástrojù, které analyzují zpracování po¾adavku serveru. Jedná se o mìøení rychlosti zpracování backendu a frontendu. Velikost stahovaných klientských zdrojù jako jsou napøíklad soubory kaskádových stylù, obrázky èi Javascriptové knihovny. Jednim z tìchto nástrojù jsou Webové crawlery, neboli pavouci. 

Pavouci na¹li nejvìt¹í vyu¾ití hlavnì u internetových vyhledavaèù. Jsou navr¾eni tak taby v krátkém èase dokázali zpracovávat najednou velké mno¾ství stránek z rùzných domén. Pøi zpracovávání hledá odkazy na dal¹í stránky a ty také analyzuje. Vzhledem k velikosti a neústalého rùsta pavouci mnohdy svou práci nikdy nekonèí, nebo jsou spou¹tìni pravidelnì. Úloha pavoukù mù¾e být rùzná. 

Mým cílem je vytvoøit pavouka, který bude analyzovat pouze jednu doménu. Pøedpokládá se, tedy ¾e bude zpracovávat pouhé stovky a¾ tisíce stránek. Výstupem analýzy mají být programátorùm u¾iteèná data jako grafické zobrazení provázanosti stránek. Mìøení rychlosti a analýza stahování stránek. Rendering stránek. Souèástí analýzy je mo¾no také sledování chyb Javascriptu èi validace DOM objektu.

V této práci se budu vìnovat nìkolika hlavních èástí této problematiky. První èást bude vìnována analýze problematiky pavoukù. V druhé èásti zpracuji návrh vlastního pavouka. Ve tøetí èásti budu øe¹it implementaci vyhotoveného návrhu a poslední èást je vìnována experimentùm s pavoukem a výsledky jeho analýz.

\newpage
\chapter{Teorie}
Doplnit.

\chapter{Souèasní pavouci}
Dnes se pavouci vyu¾ívají pøevá¾nì k indexování internetu pro internetové vyhledavaèe. Mezi ty nejvíce známe mù¾eme zaøadit Google èi Bing. 

\subsection{Analýza URL}
\label{subsec:analysis}
Uniform Resource Locator (dále jen URL, neboli té¾ adresa) jsou definovány v (RFC 3986). Je potøeba rozli¹it relativní a absolutní adresu. V pøípadì relativní adresy se zohledòuje aktualní adresa dokumentu. Souèástí URL mù¾e být té¾ kotva, kotva je definována atributem \texttt{id} v elementu \texttt{<a>}, kotvy nemají pro pavouka ¾ádný význam a jsou tedy ignorovány. V pøípadì nalezení vìt¹ího mno¾ství odkazù se stejnou adresou v dokumentu, pavouk se zachová jako by pracoval s adresou jedinou.

\subsection{Extrakce URL}
\label{subsec:extraction}
Extrakce adres je mo¾né analýzou HTML webových dokumentù. Prozkoumáním vybraných elementù, mù¾eme získat potøebné odkazy. Mezi zmiòované elementy patøí\footnote{Je potøeba brát v potaz, ¾e URL  mohou být v dokumentu vlo¾eny také jako pouhý text èi pøi zpracování události javascriptem. Tyto odkazy pavouk pochopitelnì nenajde.}.

\begin{itemize}
	\item \texttt{<a></a>} atribut \texttt{href}
	\item \texttt{<form></form>} atribut \texttt{action}
	\item \texttt{<link>} atribut \texttt{href}
	\item \texttt{<script></script>} atribut \texttt{src}
	\item \texttt{<style></style>} atribut \texttt{src}
\end{itemize}

\subsection{Zaznamenání èasových událostí}
Pro u¾ivatele je dùle¾itý co nejkrat¹í èas mezi odesláním po¾adavku na server a zobrazení stránky. Tento èas je mo¾né rozdìlit na dvì hlavní èásti a to:
\begin{itemize}
 \item èas stráveny zpracováním po¾adavku na serveru - Backend
 \item èas strávený sta¾ení a zobrazení zdrojových dokumentù - Frontend
\end{itemize}
Webová stránka, která se zobrazí u¾ivateli v prohlí¾eèi je mnohdy slo¾ena z více souborù. Jedná se jednak o HTML/XML dokument, ale také o obrázky, Kaskádove styly, Javascript a dal¹í soubory. Moderní prohlí¾eèe dnes doká¾í stahovat více souborù z jednoho serveru najednou aby èas strávený stahováním co nejvíce urychlily. Mno¾ství vláken se v¹ak u ka¾dého prohlí¾eèe li¹í a u¾ivatel mù¾e s touto hodnotou manipulovat. [Zdroj]


\newpage
\chapter{Návrh aplikace}
Aplikace je slo¾ena z nìkolika èástí. Jedná se o algoritmus pavouka, který stahuje a analyzuje dokumenty. Databázovým ulo¾i¹tìm, které uchovává analyzované data a grafická nadstavba (GUI) pøes kterou je aplikace øízena. Pro vykreslování dokumentù jsou vyu¾ity technologie Headless Browseru, v tomto pøípadì byl vyu¾it PhantomJS, který pracuje na vykreslovacím jádøe WebKit.

\subsection{Java}
Byla vyu¾ita platforma Java s platformou JavaFX, která umo¾òuje tvorbu Rich Internet Applications (dále jen RIA). JavaFX aplikace je mo¾no vyu¾ít i jako desktopové aplikace. Aplikace vytvoøena souèástí této práce byla naprogramována pro Java 8, JavaFX 8.

\subsection{Omezení prohledání}
Cílem aplikaci je analyzovat pouze jedinou doménu. Pøi prohledávání je tedy nutno zamezit zabloudìní pavouka na cizí domény a prohledávání zcela jiné èásti internetu. Toto je dosa¾eno kontrolou domény nejvy¹¹ího soukromého øádu spoleènì s veøejným suffixem. Pokud se doména tohoto øádu nebo suffix li¹í, adresa se neprohledává.

Je tøeba také poèítat s tím, ¾e mno¾ství dokumentù a odkazù na doménì není pøedem známo. Doména mù¾e obsahovat nìkolik desítek dokumentù, ale i nìkolik stovek. Aplikace musí být na tuto skuteènost pøipravena a v pøípadì procházení takto velké domény zareagovat. Toto je uskuteènìno stanovením maximální hloubky prohledávání. Pøed prohledáním prvního dokumentu je aktualní hloubka 0 a ka¾dým dal¹ím dokumentem se hodnota zvý¹í o 1. V pøípadì dosa¾ení maximální hloubky prohledávání se z tohoto dokumentu neextraktují dal¹í adresy.

\subsection{Analýza DOM objektu}
Extrakce adres z HTML dokumentù je mo¾né za pomocí prohledání Document Object Modelu (dále jen DOM). V objektu se hledají elementy a atributy zmínìne v \ref{subsec:extraction}. Vyta¾ené adresy se musí dále zpracovat jak bylo popsáno v \ref{subsec:analysis}, k adrese se také pøídá záznam na kterém dokumentu byl nalezen a následnì se vlo¾í do fronty ke zpracování.

Pro práci s DOM objektem a extrakci adres je vyu¾it HTML parser \texttt{jsoup}.

\subsection{Databáze}
Jako databáze byla zvolena \texttt{OrientDB 2.0.1 Community Eddition}, jedná se o hybridní NoSQL databáze umo¾òujíci pracovat jak v Dokument (MongoDB) tak Grafovém (Neo4j) modu.

Aby aplikace nemusela skladovat v pamìti pøíli¹ velké mno¾ství dat, data se co nejdøíve po zpracování pøesunou do databáze. Jeliko¾ zpracované data ve své podstatì vytváøí orientovaný graf webových dokumentù, byla pro tuto potøebu zvolena grafová databáze. Zpùsob ulo¾ení dat v databázi tedy co nejvíce pøipomíná zpùsobu ulo¾ení dat na doménì. 

Grafová databáze je sestavena stejnì jako graf ze dvou základních stavebních prvkù. Vrcholy a hrany mezi vrcholy. Jako vrcholy si mù¾eme napøíklad pøedstavit samotné dokumenty. Hrany by poté mohly být odkazy mezi tìmito dokumenty. Kompletní popis hiearchie v databázi lze vidìt na následujícím diagramu a tabulce.
\begin{center}
  \begin{tabular}{| c | c | l |}
    \hline
    \textbf{Název} & \textbf{Typ} & \textbf{Popis} \\
    \hline
    Resource & Vrchol & Webový dokument \\
    \hline
    Form & Vrchol & Formuláø \\
    \hline
    LinkTo & Hrana & Odkaz mezi dokumenty \\
    \hline
    Includes & Hrana & Pøipojení formuláøe k dokumentu \\
    \hline
  \end{tabular}
\end{center}

[Diagram]

\subsection{Vykreslení dokumentu}
Pro vykreslování webových dokumentu byl vyu¾it Headless browser \texttt{PhantomJS 2.0}. PhantomJS obsahuje vykreslovací jádro WebKit, lze s ním tedy emulovat vykreslování podobné prohlí¾eèùm se stejným jádrem jako je napø Google Chrome, Safari èi Opera. 

PhantomJS je plnì ovladatelný Javascriptem.[Doplnit]

[Diagram]

\newpage
\chapter{Implementace aplikace}

\newpage
\chapter{Experimenty}

\newpage
\chapter{Závìr}

\chapter{Slovníèek pojmù}
\begin{itemize}
	\item Frontend - Klientská èást zpracování po¾adavku
	\item Backend - Serverová èást zpracování po¾adavku
	\item Crawler - pavouk
	\item Resource - zdroj/webový objekt
	\item Headless browser - Prohlí¾eè bì¾ící v pozadí
\end{itemize}

%=========================================================================
